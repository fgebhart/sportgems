{"config":{"lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Find valuable gems \ud83d\udc8e in your sport \ud83d\udeb4 activity! sportgems is a library for parsing activity data. It can be used to either find the fastest sections or the sections with best climb value . Example Usage In order to search for gems \ud83d\udc8e in your activity, pass a path and desired distance to e.g. find_fastest_section_in_fit like: from sportgems import find_fastest_section_in_fit desired_distance = 1_000 # in meter path = \"tests/data/2019-09-14-17-22-05.fit\" result = find_fastest_section_in_fit ( desired_distance , path ) # start and end index of fastest 1000m section: result . start # 635 result . end # 725 # average velocity (in m/s) during that 1000m section: result . velocity # 2.898669803146783","title":"Getting Started"},{"location":"#find-valuable-gems-in-your-sport-activity","text":"sportgems is a library for parsing activity data. It can be used to either find the fastest sections or the sections with best climb value .","title":"Find valuable gems \ud83d\udc8e in your sport \ud83d\udeb4 activity!"},{"location":"#example-usage","text":"In order to search for gems \ud83d\udc8e in your activity, pass a path and desired distance to e.g. find_fastest_section_in_fit like: from sportgems import find_fastest_section_in_fit desired_distance = 1_000 # in meter path = \"tests/data/2019-09-14-17-22-05.fit\" result = find_fastest_section_in_fit ( desired_distance , path ) # start and end index of fastest 1000m section: result . start # 635 result . end # 725 # average velocity (in m/s) during that 1000m section: result . velocity # 2.898669803146783","title":"Example Usage"},{"location":"climb/","text":"Documentation for climb interface sportgems . find_best_climb_section ( desired_distance , times , coordinates , altitudes , tolerance = 0.01 ) Parses the given input coordinates , times and altitudes values to find the section with best climb value of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required altitudes List[float] A list of floats containing the altitude values. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection ClimbSection: Returns a Python object of type ClimbSection, with the results given as attributes: start, end and climb. sportgems . find_best_climb_section_in_fit ( desired_distance , path_to_fit , tolerance = 0.01 ) Takes path_to_fit file as argument and parses it to find the best climb section of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection ClimbSection: Returns a Python object of type ClimbSection, with the results given as attributes: start, end and climb.","title":"Climb"},{"location":"climb/#documentation-for-climb-interface","text":"","title":"Documentation for climb interface"},{"location":"climb/#sportgems.find_best_climb_section","text":"Parses the given input coordinates , times and altitudes values to find the section with best climb value of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required altitudes List[float] A list of floats containing the altitude values. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection ClimbSection: Returns a Python object of type ClimbSection, with the results given as attributes: start, end and climb.","title":"find_best_climb_section()"},{"location":"climb/#sportgems.find_best_climb_section_in_fit","text":"Takes path_to_fit file as argument and parses it to find the best climb section of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection ClimbSection: Returns a Python object of type ClimbSection, with the results given as attributes: start, end and climb.","title":"find_best_climb_section_in_fit()"},{"location":"fastest/","text":"Documentation of fastest interface sportgems . find_fastest_section ( desired_distance , times , coordinates , tolerance = 0.01 ) Parses the given input coordinates and times to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection FastestSection: Returns a Python object of type FastestSection, with the results given as attributes: start, end and velocity. sportgems . find_fastest_section_in_fit ( desired_distance , path_to_fit , tolerance = 0.01 ) Takes path_to_fit file as argument and parses it to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection FastestSection: Returns a Python object of type FastestSection, with the results given as attributes: start, end and velocity.","title":"Fastest"},{"location":"fastest/#documentation-of-fastest-interface","text":"","title":"Documentation of fastest interface"},{"location":"fastest/#sportgems.find_fastest_section","text":"Parses the given input coordinates and times to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection FastestSection: Returns a Python object of type FastestSection, with the results given as attributes: start, end and velocity.","title":"find_fastest_section()"},{"location":"fastest/#sportgems.find_fastest_section_in_fit","text":"Takes path_to_fit file as argument and parses it to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection FastestSection: Returns a Python object of type FastestSection, with the results given as attributes: start, end and velocity.","title":"find_fastest_section_in_fit()"}]}