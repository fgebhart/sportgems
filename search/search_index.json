{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Find valuable gems \ud83d\udc8e in your activities \ud83d\udeb4","text":"<p><code>sportgems</code> is a library for parsing activity data. It can be used to either find the fastest sections or the best climb sections.</p>"},{"location":"#installation","title":"Installation","text":"<p>Sportgems is written in rust and bundled in a python package using pyo3. Simply install it using pip:</p> <pre><code>pip install sportgems\n</code></pre>"},{"location":"#example-usage","title":"Example Usage","text":"<p>In order to search for gems \ud83d\udc8e in your activity, pass a path and desired distance to e.g. <code>find_fastest_section_in_fit</code> like:</p> <pre><code>from sportgems import find_fastest_section_in_fit\n\ndesired_distance = 1_000  # in meter\npath = \"tests/data/2019-09-14-17-22-05.fit\"\nresult = find_fastest_section_in_fit(desired_distance, path)\n\n# start and end index of fastest 1000m section:\nresult.start            # 635\nresult.end              # 725\n\n# average velocity (in m/s) during that 1000m section:\nresult.velocity         # 2.898669803146783\n</code></pre>"},{"location":"changelog/","title":"Sportgems Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#080-2023-07-26","title":"0.8.0 - 2023-07-26","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added support for Python 3.11.</li> </ul>"},{"location":"changelog/#071-2022-02-26","title":"0.7.1 - 2022-02-26","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fix CI build pipeline to allow publishing arm and manylinux binary wheels to pypi.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Drop pushing windows wheel to pypi.</li> </ul>"},{"location":"changelog/#070-2022-02-24","title":"0.7.0 - 2022-02-24","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Dropped support for Python3.7 while add support for Python3.10. Python 3.8, 3.9   and 3.10 are officially supported now.</li> </ul>"},{"location":"changelog/#060-2021-06-19","title":"0.6.0 - 2021-06-19","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Sportgems dropped support for Python3.6. But at the same time provides pre-compiled   wheels for armv7 for Python 3.7, 3.8 and 3.9, which is required when using   sportgems with Raspberry Pi.</li> </ul>"},{"location":"changelog/#050-2021-04-03","title":"0.5.0 - 2021-04-03","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Slightly shift the start index by +1 when computing the distance of a section in   order to handle target value spikes in situations with poor gps quality.</li> </ul>"},{"location":"changelog/#042-2021-03-20","title":"0.4.2 - 2021-03-20","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fill null values in altitude vector and properly treat sections lengths of &lt;=1   when computing accumulated gained altitude. Also make error message more generic.</li> </ul>"},{"location":"changelog/#041-2021-03-11","title":"0.4.1 - 2021-03-11","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>GH20: Fix faulty treatment of   null values in input coordinates. <code>fill_nans</code> now applies a forward (and backward)   filling to fill null values with existing ones.</li> </ul>"},{"location":"changelog/#040-2021-03-08","title":"0.4.0 - 2021-03-08","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>introduce custom exceptions</li> <li>enable parsing best <code>climb</code> section</li> <li>remove <code>valid</code> attribute (exception is raised if no valid section is found)</li> <li>parse <code>timestamps</code>, <code>coordinates</code>, <code>altitudes</code> and <code>calories</code> from fit files</li> </ul>"},{"location":"changelog/#previous-releases","title":"previous releases","text":"<p>see github releases</p>"},{"location":"code_reference/","title":"sportgems Module reference","text":""},{"location":"code_reference/#fastest","title":"Fastest \ud83c\udfc3\u200d\u2640\ufe0f","text":""},{"location":"code_reference/#sportgems.find_fastest_section","title":"<code>sportgems.find_fastest_section(desired_distance, times, coordinates, tolerance=0.01)</code>","text":"<p>Parses the given input <code>coordinates</code> and <code>times</code> to find the fastest section of length <code>desired_distance</code>.</p> <p>Parameters:</p> Name Type Description Default <code>desired_distance</code> <code>int</code> <p>Length in meter of the desired fastest section to parse for.</p> required <code>times</code> <code>List[float]</code> <p>A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list.</p> required <code>coordinates</code> <code>List[Tuple[float, float]]</code> <p>A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon).</p> required <code>tolerance</code> <code>float</code> <p>Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section.</p> <code>0.01</code> <p>Returns:</p> Type Description <code>FastestSection</code> <p>Returns a Python object of type <code>FastestSection</code>, with     the results given as attributes: <code>start</code>, <code>end</code> and <code>velocity</code>.</p> <p>Exceptions:</p> Type Description <code>DistanceTooSmallException</code> <p>If input distance is too small, see <code>DistanceTooSmallException</code>.</p> <code>InconsistentLengthException</code> <p>If length of input lists is not equal, see <code>InconsistentLengthException</code>.</p> <code>TooFewDataPointsException</code> <p>If input data has too few data points, see <code>TooFewDataPointsException</code>.</p> <code>NoSectionFoundException</code> <p>If no section with <code>desired_distance</code> was found, see <code>NoSectionFoundException</code>.</p> <code>InvalidDesiredDistanceException</code> <p>If given <code>desired_distance</code> is invalid, see <code>InvalidDesiredDistanceException</code>.</p>"},{"location":"code_reference/#sportgems.find_fastest_section_in_fit","title":"<code>sportgems.find_fastest_section_in_fit(desired_distance, path_to_fit, tolerance=0.01)</code>","text":"<p>Takes <code>path_to_fit</code> file as argument and parses it to find the fastest section of length <code>desired_distance</code>.</p> <p>Parameters:</p> Name Type Description Default <code>desired_distance</code> <code>int</code> <p>Length in meter of the desired fastest section to parse for.</p> required <code>path_to_fit</code> <code>str</code> <p>Path to the fit file, which should be parsed by sportgems.</p> required <code>tolerance</code> <code>float</code> <p>Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section.</p> <code>0.01</code> <p>Returns:</p> Type Description <code>FastestSection</code> <p>Returns a Python object of type <code>FastestSection</code>, with     the results given as attributes: <code>start</code>, <code>end</code> and <code>velocity</code>.</p> <p>Exceptions:</p> Type Description <code>DistanceTooSmallException</code> <p>If input distance is too small, see <code>DistanceTooSmallException</code>.</p> <code>TooFewDataPointsException</code> <p>If input data has too few data points, see <code>TooFewDataPointsException</code>.</p> <code>NoSectionFoundException</code> <p>If no section with <code>desired_distance</code> was found, see <code>NoSectionFoundException</code>.</p> <code>InvalidDesiredDistanceException</code> <p>If given <code>desired_distance</code> is invalid, see <code>InvalidDesiredDistanceException</code>.</p>"},{"location":"code_reference/#sportgems.FastestSection","title":"<code> sportgems.FastestSection        </code>","text":"<p>Result of parsing activity data for fastest section.</p> <p>Attributes:</p> Name Type Description <code>start</code> <code>int</code> <p>Start index of fastest section.</p> <code>end</code> <code>int</code> <p>End index of fastest section.</p> <code>velocity</code> <code>float</code> <p>Found max velocity of given section.</p>"},{"location":"code_reference/#climb","title":"Climb \ud83c\udfd4","text":""},{"location":"code_reference/#sportgems.find_best_climb_section","title":"<code>sportgems.find_best_climb_section(desired_distance, times, coordinates, altitudes, tolerance=0.01)</code>","text":"<p>Parses the given input <code>coordinates</code>, <code>times</code> and <code>altitudes</code> values to find the section with best climb value of length <code>desired_distance</code>. The climb value is determined as max climbed uphill meters per time.</p> <p>Parameters:</p> Name Type Description Default <code>desired_distance</code> <code>int</code> <p>Length in meter of the desired best climb section to parse for.</p> required <code>times</code> <code>List[float]</code> <p>A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list.</p> required <code>coordinates</code> <code>List[Tuple[float, float]]</code> <p>A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon).</p> required <code>altitudes</code> <code>List[float]</code> <p>A list of floats containing the altitude values.</p> required <code>tolerance</code> <code>float</code> <p>Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section.</p> <code>0.01</code> <p>Returns:</p> Type Description <code>ClimbSection</code> <p>Returns a Python object of type <code>ClimbSection</code>, with the     results given as attributes: <code>start</code>, <code>end</code> and <code>climb</code>.</p> <p>Exceptions:</p> Type Description <code>DistanceTooSmallException</code> <p>If input distance is too small, see <code>DistanceTooSmallException</code>.</p> <code>InconsistentLengthException</code> <p>If length of input lists is not equal, see <code>InconsistentLengthException</code>.</p> <code>TooFewDataPointsException</code> <p>If input data has too few data points, see <code>TooFewDataPointsException</code>.</p> <code>NoSectionFoundException</code> <p>If no section with <code>desired_distance</code> was found, see <code>NoSectionFoundException</code>.</p> <code>InvalidDesiredDistanceException</code> <p>If given <code>desired_distance</code> is invalid, see <code>InvalidDesiredDistanceException</code>.</p>"},{"location":"code_reference/#sportgems.find_best_climb_section_in_fit","title":"<code>sportgems.find_best_climb_section_in_fit(desired_distance, path_to_fit, tolerance=0.01)</code>","text":"<p>Takes <code>path_to_fit</code> file as argument and parses it to find the best climb section of length <code>desired_distance</code>. The climb value is determined as max climbed uphill meters per time.</p> <p>Parameters:</p> Name Type Description Default <code>desired_distance</code> <code>int</code> <p>Length in meter of the desired best climb section to parse for.</p> required <code>path_to_fit</code> <code>str</code> <p>Path to the fit file, which should be parsed by sportgems.</p> required <code>tolerance</code> <code>float</code> <p>Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section.</p> <code>0.01</code> <p>Returns:</p> Type Description <code>ClimbSection</code> <p>Returns a Python object of type <code>ClimbSection</code>, with the     results given as attributes: <code>start</code>, <code>end</code> and <code>climb</code>.</p> <p>Exceptions:</p> Type Description <code>DistanceTooSmallException</code> <p>If input distance is too small, see <code>DistanceTooSmallException</code>.</p> <code>TooFewDataPointsException</code> <p>If input data has too few data points, see <code>TooFewDataPointsException</code>.</p> <code>NoSectionFoundException</code> <p>If no section with <code>desired_distance</code> was found, see <code>NoSectionFoundException</code>.</p> <code>InvalidDesiredDistanceException</code> <p>If given <code>desired_distance</code> is invalid, see <code>InvalidDesiredDistanceException</code>.</p>"},{"location":"code_reference/#sportgems.ClimbSection","title":"<code> sportgems.ClimbSection        </code>","text":"<p>Result of parsing activity data for best climb section.</p> <p>Attributes:</p> Name Type Description <code>start</code> <code>int</code> <p>Start index of best climb section.</p> <code>end</code> <code>int</code> <p>End index of best climb section.</p> <code>climb</code> <code>float</code> <p>Found max climb value of given section.</p>"},{"location":"code_reference/#exceptions","title":"Exceptions \ud83d\udd25","text":""},{"location":"code_reference/#sportgems.DistanceTooSmallException","title":"<code> sportgems.DistanceTooSmallException            (Exception)         </code>","text":"<p>Distance of provided input data is too smaller than the requested <code>desired_distance</code>. Either descrease <code>desired_distance</code> or check your input data.</p>"},{"location":"code_reference/#sportgems.InconsistentLengthException","title":"<code> sportgems.InconsistentLengthException            (Exception)         </code>","text":"<p>Length of input lists of e.g. <code>coordinates</code>, <code>times</code> and <code>altitudes</code> needs to be equal.</p>"},{"location":"code_reference/#sportgems.TooFewDataPointsException","title":"<code> sportgems.TooFewDataPointsException            (Exception)         </code>","text":"<p>The input data must consist of at least two (not null) data points.</p>"},{"location":"code_reference/#sportgems.NoSectionFoundException","title":"<code> sportgems.NoSectionFoundException            (Exception)         </code>","text":"<p>No section with <code>desired_distance</code> found, check quality of input data or increase <code>tolerance</code>.</p>"},{"location":"code_reference/#sportgems.InvalidDesiredDistanceException","title":"<code> sportgems.InvalidDesiredDistanceException            (Exception)         </code>","text":"<p>Value of <code>desired_distance</code> needs to be greater than zero.</p>"},{"location":"code_reference/#misc","title":"Misc \ud83e\udd38\u200d\u2642\ufe0f","text":""},{"location":"code_reference/#sportgems.parse_fit_data","title":"<code>sportgems.parse_fit_data(path_to_fit)</code>","text":"<p>Takes <code>path_to_fit</code> file as argument and parses it. Will return a python object with parsed data as attributes.</p> <p>Parameters:</p> Name Type Description Default <code>path_to_fit</code> <code>str</code> <p>Path to the fit file, which should be parsed.</p> required <p>Returns:</p> Type Description <code>FitData</code> <p>Returns a Python object of type <code>FitData</code>, with the results     given as attributes.</p>"},{"location":"code_reference/#sportgems.FitData","title":"<code> sportgems.FitData        </code>","text":"<p>Data container returned by e.g. <code>parse_fit_data</code> holding the parsed results as attributes.</p> <p>Attributes:</p> Name Type Description <code>calories</code> <code>int</code> <p>Calories parsed from input data given in kcal.</p> <code>times</code> <code>List[float]</code> <p>List of timestamps since unix epoch.</p> <code>coordinates</code> <code>List[Tuple[float]]</code> <p>List of tuples of floats containing the parsed coordinates as <code>(lat, lon)</code>.</p> <code>altitudes</code> <code>List[float]</code> <p>List of floats containing the parsed altitude values in meters.</p>"},{"location":"sportgems/readme/","title":"Readme","text":"<p>Do not delete this folder on github. The python stub file <code>__init__.pyi</code> will be copied here during creating the docs using <code>mkdocs</code>.</p>"}]}