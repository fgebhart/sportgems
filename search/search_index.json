{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Find valuable gems \ud83d\udc8e in your activities \ud83d\udeb4 \u00a4 sportgems is a library for parsing activity data. It can be used to either find the fastest sections or the best climb sections . Installation \u00a4 Sportgems is written in rust and bundled in a python package using pyo3 . Simply install it using pip: pip install sportgems Example Usage \u00a4 In order to search for gems \ud83d\udc8e in your activity, pass a path and desired distance to e.g. find_fastest_section_in_fit like: from sportgems import find_fastest_section_in_fit desired_distance = 1_000 # in meter path = \"tests/data/2019-09-14-17-22-05.fit\" result = find_fastest_section_in_fit(desired_distance, path) # start and end index of fastest 1000m section: result.start # 635 result.end # 725 # average velocity (in m/s) during that 1000m section: result.velocity # 2.898669803146783","title":"Getting Started"},{"location":"#find-valuable-gems-in-your-activities","text":"sportgems is a library for parsing activity data. It can be used to either find the fastest sections or the best climb sections .","title":"Find valuable gems \ud83d\udc8e in your activities \ud83d\udeb4"},{"location":"#installation","text":"Sportgems is written in rust and bundled in a python package using pyo3 . Simply install it using pip: pip install sportgems","title":"Installation"},{"location":"#example-usage","text":"In order to search for gems \ud83d\udc8e in your activity, pass a path and desired distance to e.g. find_fastest_section_in_fit like: from sportgems import find_fastest_section_in_fit desired_distance = 1_000 # in meter path = \"tests/data/2019-09-14-17-22-05.fit\" result = find_fastest_section_in_fit(desired_distance, path) # start and end index of fastest 1000m section: result.start # 635 result.end # 725 # average velocity (in m/s) during that 1000m section: result.velocity # 2.898669803146783","title":"Example Usage"},{"location":"changelog/","text":"Sportgems Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.7.0 - 2022-02-24 \u00a4 Changed \u00a4 Dropped support for Python3.7 while add support for Python3.10. Python 3.8, 3.9 and 3.10 are officially supported now. 0.6.0 - 2021-06-19 \u00a4 Changed \u00a4 Sportgems dropped support for Python3.6. But at the same time provides pre-compiled wheels for armv7 for Python 3.7, 3.8 and 3.9, which is required when using sportgems with Raspberry Pi. 0.5.0 - 2021-04-03 \u00a4 Changed \u00a4 Slightly shift the start index by +1 when computing the distance of a section in order to handle target value spikes in situations with poor gps quality. 0.4.2 - 2021-03-20 \u00a4 Fixed \u00a4 Fill null values in altitude vector and properly treat sections lengths of <=1 when computing accumulated gained altitude. Also make error message more generic. 0.4.1 - 2021-03-11 \u00a4 Fixed \u00a4 GH20 : Fix faulty treatment of null values in input coordinates. fill_nans now applies a forward (and backward) filling to fill null values with existing ones. 0.4.0 - 2021-03-08 \u00a4 Changed \u00a4 introduce custom exceptions enable parsing best climb section remove valid attribute (exception is raised if no valid section is found) parse timestamps , coordinates , altitudes and calories from fit files previous releases \u00a4 see github releases","title":"Changelog"},{"location":"changelog/#sportgems-changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Sportgems Changelog"},{"location":"changelog/#070-2022-02-24","text":"","title":"0.7.0 - 2022-02-24"},{"location":"changelog/#changed","text":"Dropped support for Python3.7 while add support for Python3.10. Python 3.8, 3.9 and 3.10 are officially supported now.","title":"Changed"},{"location":"changelog/#060-2021-06-19","text":"","title":"0.6.0 - 2021-06-19"},{"location":"changelog/#changed_1","text":"Sportgems dropped support for Python3.6. But at the same time provides pre-compiled wheels for armv7 for Python 3.7, 3.8 and 3.9, which is required when using sportgems with Raspberry Pi.","title":"Changed"},{"location":"changelog/#050-2021-04-03","text":"","title":"0.5.0 - 2021-04-03"},{"location":"changelog/#changed_2","text":"Slightly shift the start index by +1 when computing the distance of a section in order to handle target value spikes in situations with poor gps quality.","title":"Changed"},{"location":"changelog/#042-2021-03-20","text":"","title":"0.4.2 - 2021-03-20"},{"location":"changelog/#fixed","text":"Fill null values in altitude vector and properly treat sections lengths of <=1 when computing accumulated gained altitude. Also make error message more generic.","title":"Fixed"},{"location":"changelog/#041-2021-03-11","text":"","title":"0.4.1 - 2021-03-11"},{"location":"changelog/#fixed_1","text":"GH20 : Fix faulty treatment of null values in input coordinates. fill_nans now applies a forward (and backward) filling to fill null values with existing ones.","title":"Fixed"},{"location":"changelog/#040-2021-03-08","text":"","title":"0.4.0 - 2021-03-08"},{"location":"changelog/#changed_3","text":"introduce custom exceptions enable parsing best climb section remove valid attribute (exception is raised if no valid section is found) parse timestamps , coordinates , altitudes and calories from fit files","title":"Changed"},{"location":"changelog/#previous-releases","text":"see github releases","title":"previous releases"},{"location":"code_reference/","text":"sportgems Module reference \u00a4 Fastest \ud83c\udfc3\u200d\u2640\ufe0f \u00a4 sportgems . find_fastest_section ( desired_distance , times , coordinates , tolerance = 0.01 ) \u00a4 Parses the given input coordinates and times to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection Returns a Python object of type FastestSection , with the results given as attributes: start , end and velocity . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . InconsistentLengthException If length of input lists is not equal, see InconsistentLengthException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException . sportgems . find_fastest_section_in_fit ( desired_distance , path_to_fit , tolerance = 0.01 ) \u00a4 Takes path_to_fit file as argument and parses it to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection Returns a Python object of type FastestSection , with the results given as attributes: start , end and velocity . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException . sportgems.FastestSection \u00a4 Result of parsing activity data for fastest section. Attributes: Name Type Description start int Start index of fastest section. end int End index of fastest section. velocity float Found max velocity of given section. Climb \ud83c\udfd4 \u00a4 sportgems . find_best_climb_section ( desired_distance , times , coordinates , altitudes , tolerance = 0.01 ) \u00a4 Parses the given input coordinates , times and altitudes values to find the section with best climb value of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required altitudes List[float] A list of floats containing the altitude values. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection Returns a Python object of type ClimbSection , with the results given as attributes: start , end and climb . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . InconsistentLengthException If length of input lists is not equal, see InconsistentLengthException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException . sportgems . find_best_climb_section_in_fit ( desired_distance , path_to_fit , tolerance = 0.01 ) \u00a4 Takes path_to_fit file as argument and parses it to find the best climb section of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection Returns a Python object of type ClimbSection , with the results given as attributes: start , end and climb . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException . sportgems.ClimbSection \u00a4 Result of parsing activity data for best climb section. Attributes: Name Type Description start int Start index of best climb section. end int End index of best climb section. climb float Found max climb value of given section. Exceptions \ud83d\udd25 \u00a4 sportgems.DistanceTooSmallException ( Exception ) \u00a4 Distance of provided input data is too smaller than the requested desired_distance . Either descrease desired_distance or check your input data. sportgems.InconsistentLengthException ( Exception ) \u00a4 Length of input lists of e.g. coordinates , times and altitudes needs to be equal. sportgems.TooFewDataPointsException ( Exception ) \u00a4 The input data must consist of at least two (not null) data points. sportgems.NoSectionFoundException ( Exception ) \u00a4 No section with desired_distance found, check quality of input data or increase tolerance . sportgems.InvalidDesiredDistanceException ( Exception ) \u00a4 Value of desired_distance needs to be greater than zero. Misc \ud83e\udd38\u200d\u2642\ufe0f \u00a4 sportgems . parse_fit_data ( path_to_fit ) \u00a4 Takes path_to_fit file as argument and parses it. Will return a python object with parsed data as attributes. Parameters: Name Type Description Default path_to_fit str Path to the fit file, which should be parsed. required Returns: Type Description FitData Returns a Python object of type FitData , with the results given as attributes. sportgems.FitData \u00a4 Data container returned by e.g. parse_fit_data holding the parsed results as attributes. Attributes: Name Type Description calories int Calories parsed from input data given in kcal. times List[float] List of timestamps since unix epoch. coordinates List[Tuple[float]] List of tuples of floats containing the parsed coordinates as (lat, lon) . altitudes List[float] List of floats containing the parsed altitude values in meters.","title":"Code Reference"},{"location":"code_reference/#sportgems-module-reference","text":"","title":"sportgems Module reference"},{"location":"code_reference/#fastest","text":"","title":"Fastest \ud83c\udfc3\u200d\u2640\ufe0f"},{"location":"code_reference/#sportgems.find_fastest_section","text":"Parses the given input coordinates and times to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection Returns a Python object of type FastestSection , with the results given as attributes: start , end and velocity . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . InconsistentLengthException If length of input lists is not equal, see InconsistentLengthException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException .","title":"find_fastest_section()"},{"location":"code_reference/#sportgems.find_fastest_section_in_fit","text":"Takes path_to_fit file as argument and parses it to find the fastest section of length desired_distance . Parameters: Name Type Description Default desired_distance int Length in meter of the desired fastest section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description FastestSection Returns a Python object of type FastestSection , with the results given as attributes: start , end and velocity . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException .","title":"find_fastest_section_in_fit()"},{"location":"code_reference/#sportgems.FastestSection","text":"Result of parsing activity data for fastest section. Attributes: Name Type Description start int Start index of fastest section. end int End index of fastest section. velocity float Found max velocity of given section.","title":"FastestSection"},{"location":"code_reference/#climb","text":"","title":"Climb \ud83c\udfd4"},{"location":"code_reference/#sportgems.find_best_climb_section","text":"Parses the given input coordinates , times and altitudes values to find the section with best climb value of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required times List[float] A list of timestamps as floats given in seconds since the Unix epoch, where each timestamp corresponds to one coordinate in the coordinates list. required coordinates List[Tuple[float, float]] A list of tuple of floats, where each tuple represents one coordinate. The first float represents the latitude and the second the longitude: (lat, lon). required altitudes List[float] A list of floats containing the altitude values. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection Returns a Python object of type ClimbSection , with the results given as attributes: start , end and climb . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . InconsistentLengthException If length of input lists is not equal, see InconsistentLengthException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException .","title":"find_best_climb_section()"},{"location":"code_reference/#sportgems.find_best_climb_section_in_fit","text":"Takes path_to_fit file as argument and parses it to find the best climb section of length desired_distance . The climb value is determined as max climbed uphill meters per time. Parameters: Name Type Description Default desired_distance int Length in meter of the desired best climb section to parse for. required path_to_fit str Path to the fit file, which should be parsed by sportgems. required tolerance float Percentage value to specify bounds in which the distance of a section is still considered to be equal to the desired distance. Because due to the finite resolution of activity data, not all sections are exactly e.g. 1000 meter long, but with the default of 0.01 a section with 1010 meter will still be considered as a 1000 meter section. 0.01 Returns: Type Description ClimbSection Returns a Python object of type ClimbSection , with the results given as attributes: start , end and climb . Exceptions: Type Description DistanceTooSmallException If input distance is too small, see DistanceTooSmallException . TooFewDataPointsException If input data has too few data points, see TooFewDataPointsException . NoSectionFoundException If no section with desired_distance was found, see NoSectionFoundException . InvalidDesiredDistanceException If given desired_distance is invalid, see InvalidDesiredDistanceException .","title":"find_best_climb_section_in_fit()"},{"location":"code_reference/#sportgems.ClimbSection","text":"Result of parsing activity data for best climb section. Attributes: Name Type Description start int Start index of best climb section. end int End index of best climb section. climb float Found max climb value of given section.","title":"ClimbSection"},{"location":"code_reference/#exceptions","text":"","title":"Exceptions \ud83d\udd25"},{"location":"code_reference/#sportgems.DistanceTooSmallException","text":"Distance of provided input data is too smaller than the requested desired_distance . Either descrease desired_distance or check your input data.","title":"DistanceTooSmallException"},{"location":"code_reference/#sportgems.InconsistentLengthException","text":"Length of input lists of e.g. coordinates , times and altitudes needs to be equal.","title":"InconsistentLengthException"},{"location":"code_reference/#sportgems.TooFewDataPointsException","text":"The input data must consist of at least two (not null) data points.","title":"TooFewDataPointsException"},{"location":"code_reference/#sportgems.NoSectionFoundException","text":"No section with desired_distance found, check quality of input data or increase tolerance .","title":"NoSectionFoundException"},{"location":"code_reference/#sportgems.InvalidDesiredDistanceException","text":"Value of desired_distance needs to be greater than zero.","title":"InvalidDesiredDistanceException"},{"location":"code_reference/#misc","text":"","title":"Misc \ud83e\udd38\u200d\u2642\ufe0f"},{"location":"code_reference/#sportgems.parse_fit_data","text":"Takes path_to_fit file as argument and parses it. Will return a python object with parsed data as attributes. Parameters: Name Type Description Default path_to_fit str Path to the fit file, which should be parsed. required Returns: Type Description FitData Returns a Python object of type FitData , with the results given as attributes.","title":"parse_fit_data()"},{"location":"code_reference/#sportgems.FitData","text":"Data container returned by e.g. parse_fit_data holding the parsed results as attributes. Attributes: Name Type Description calories int Calories parsed from input data given in kcal. times List[float] List of timestamps since unix epoch. coordinates List[Tuple[float]] List of tuples of floats containing the parsed coordinates as (lat, lon) . altitudes List[float] List of floats containing the parsed altitude values in meters.","title":"FitData"},{"location":"sportgems/readme/","text":"Do not delete this folder on github. The python stub file __init__.pyi will be copied here during creating the docs using mkdocs .","title":"Readme"}]}